import java.util.HashMap;
import java.util.Map;

public enum CountryCodeEnum {

    Afghanistan("2AF"),
    Albania("1AL"),
    Algeria("1AG"),
    Andorra("1AN"),
    Angola("1AO"),
    Anguilla("1AI"),
    AntiguaAndBarbuda("1AT", "Antigua And Barbuda"),
    Argentina("1AR"),
    Armenia("1AM"),
    Australia("1AU"),
    Austria("1ÖS"),
    Azerbaijan("1AZ"),
    Bahamas("1BM"),
    Bahrain("1BH"),
    Bangladesh("1BD"),
    Barbados("1BS"),
    Belarus("1VR"),
    Belgium("1BE"),
    Belize("1BZ"),
    Benin("1DH"),
    Bermuda("1BV"),
    Bhutan("1BX"),
    Bolivia("1BO"),
    BosniaAndHerzegovina("1BC", "Bosnia And Herzegovina"),
    Botswana("1BT"),
    Brazil("1BN"),
    BritishVirginIslands("1VG", "British Virgin Islands"),
    BruneiDarussalam("1BY", "Brunai Darussalam"),
    Bulgaria("1BU"),
    BurkinaFaso("1ÖV", "Burkina Faso"),
    Burundi("1BI"),
    Cambodia("1KB"),
    Cameroon("1CM"),
    Canada("1KA"),
    CapeVerde("1KV", "Cape Verde"),
    CentralAfricanRepublic("1CN", "Central African Republic"),
    Chad("1TC"),
    Chile("1CH"),
    China("1KI"),
    Colombia("1CO"),
    Comoros("1CA"),
    Congo("1FK"),
    CongoDemocraticRepublicOf("1BK", "Democratic Republic of Congo"),
    CostaRica("1CR"),
    Croatia("1KK"),
    Cuba("1CU"),
    Cyprus("1CY"),
    CzechRepublic("1TE", "Czech Republic"),
    CôteDivoire("1EL", "Côte Divoire"),
    Djibouti("1DJ"),
    Dominica("1DM"),
    DominicanRepublic("1DO", "Dominican Republic"),
    EastTimorDemRepublic("1TP", "East Timor"),
    Ecuador("1EC"),
    Egypt("1FA"),
    ElSalvador("1SA", "El Salvador"),
    EquatorialGuinea("1EK", "Equatorial Guinea"),
    Eritrea("1ER"),
    Estonia("1ES"),
    Ethiopia("1AB"),
    Fiji("1FD"),
    France("1FR"),
    Gabon("1GB"),
    Gambia("1GM"),
    Georgia("1GE"),
    Germany("1TY"),
    Ghana("1GA"),
    Gibraltar("1GL"),
    Greece("1GR"),
    Grenada("1GD"),
    Guatemala("1GU"),
    Guinea("1GN"),
    Guineabissau("1GI"),
    Guyana("1GY"),
    Haiti("1HA"),
    Honduras("1HU"),
    Hungary("1UN"),
    India("1ID"),
    Indonesia("1IO"),
    Iran("1IN"),
    Iraq("1IK"),
    Ireland("1IR"),
    Israel("1IL"),
    Italy("1IT"),
    Jamaica("1JM"),
    Japan("1JA"),
    Jordan("1JO"),
    Kazakhstan("1KZ"),
    Kenya("1KE"),
    Kiribati("1KR"),
    KoreaDemocraticPeoplesRep("1NK", "North Korea"),
    KoreaRepublicOf("1KO", "South Korea"),
    KosovoRepublicOf("1KQ", "Republic of Kosovo"),
    Kuwait("1KU"),
    Kyrgyzstan("1KG"),
    Laos("1LA"),
    Latvia("1LE"),
    Lebanon("1LN"),
    Lesotho("1LO"),
    Liberia("1LB"),
    Libya("1LY"),
    Liechtenstein("1LS"),
    Lithuania("1LI"),
    Luxembourg("1LU"),
    Macedonia("1MJ"),
    Madagascar("1MD"),
    Malawi("1MI"),
    Malaysia("1MS"),
    Maldives("1MV"),
    Mali("1ML"),
    Malta("1MT"),
    MarshallIslands("1MH", "Marshall Islands"),
    Mauritania("1MN"),
    Mauritius("1MU"),
    Mexico("1MX"),
    Micronesia("1MK"),
    Moldova("1ME"),
    Monaco("1MO"),
    Mongolia("1MG"),
    MontenegroRepublicOf("1MQ", "Republic of Montenegro"),
    Morocco("1MA"),
    Mozambique("1MB"),
    Myanmar("1BA"),
    Namibia("1NB"),
    Nauru("1NU"),
    Nepal("1NP"),
    Netherlands("1NE"),
    NewZealand("1NZ"),
    Nicaragua("1NI"),
    Niger("1NG"),
    Nigeria("1NA"),
    Oman("1MC"),
    Pakistan("1PK"),
    Palau("1PW"),
    Panama("1PA"),
    PapuaNewGuinea("1PU", "Papua New Guinea"),
    Paraguay("1PY"),
    Peru("1PE"),
    Philippines("1FP"),
    Poland("1PO"),
    Portugal("1PG"),
    Qatar("1QA"),
    Romania("1RU"),
    RussianFederation("1RL", "Russia"),
    Rwanda("1RA"),
    SaintKittsAndNevis("1KN", "Saint Kitts And Nevis"),
    SaintLucia("1LC"),
    SaintVincentAndTheGrenadin("1VC", "Saint Vincent And The Grenadin"),
    Saknas("1UU"),
    Samoa("1VS"),
    SanMarino("1SM", "San Marino"),
    SaoTomeAndPrincipe("1ST", "Sao Tome And Principe"),
    SaudiArabia("1SD", "Saudi Arabia"),
    Senegal("1SG"),
    SerbiaRepublicOf("1SQ", "Republic of Serbia"),
    Seychelles("1SH"),
    SierraLeone("1SE"),
    Singapore("1SI"),
    Slovakia("1SZ"),
    Slovenia("1SO"),
    SolomonIslands("1SB", "Solomon Islands"),
    Somalia("2SN"),
    SouthAfrica("1SY", "South Africa"),
    SouthSudan("1SS", "South Sudan"),
    Spain("1SP"),
    SriLanka("1CE", "Sri Lanka"),
    StateOfPalestine("1PL", "State of Palestine"),
    Stateless1954("1SL", "Stateless"),
    Sudan("1SU"),
    Suriname("1SX"),
    Swaziland("1SW"),
    Switzerland("1SC"),
    Syria("1SR"),
    Taiwan("1KT"),
    Tajikistan("1TD"),
    Tanzania("1TA"),
    Thailand("1TH"),
    Togo("1TO"),
    Tonga("1TG"),
    TrinidadAndTobago("1TR", "Trinidad and Tobago"),
    Tunisia("1TN"),
    Turkey("1TU"),
    Turkmenistan("1TM"),
    Tuvalu("1TV"),
    Uganda("1UG"),
    Ukraine("1UA"),
    UnitedArabEmirates("1TS", "United Arab Emirates"),
    UnitedKingdom("1BR", "United Kingdom"),
    UnitedStates("1US", "United States of America"),
    Uruguay("1UR"),
    Uzbekistan("1UZ"),
    Vanuatu("1VU"),
    VaticanCity("1VA", "Vatican City"),
    Venezuela("1VE"),
    Vietnam("1NV"),
    Yemen("1JE"),
    Zambia("1ZB"),
    Zimbabwe("1RS");

    private String countryCode;
    private String countryNameInEnglish;

    CountryCodeEnum(String countryCode, String countryNameInEnglish) {
        this.countryCode = countryCode;
        this.countryNameInEnglish = countryNameInEnglish;
    }

    CountryCodeEnum(String countryCode) {
        this.countryCode = countryCode;
        this.countryNameInEnglish = this.name();
    }

    public static Map<String, String> getMap() {
        HashMap<String, String> temp = new HashMap<>(values().length);
        for (CountryCodeEnum countryCodeEnum : values()) {
            temp.put(countryCodeEnum.countryCode, countryCodeEnum.countryNameInEnglish);
        }
        return temp;
    }

    public String getCountryCode() {
        return countryCode;
    }

    public String getCountryNameInEnglish() {
        return countryNameInEnglish;
    }

    //returnerar en CountryCodeEnum som har parametern som lands-namn
    public static CountryCodeEnum countryNameInEnglishToEnum(String countryNameInEnglish) {
        for (CountryCodeEnum countryCodeEnum : values()) {
            if (countryCodeEnum.countryNameInEnglish.toLowerCase().equals(countryNameInEnglish.toLowerCase())) {
                return countryCodeEnum;
            }
        }
        return null;
    }
}
